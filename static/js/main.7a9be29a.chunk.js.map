{"version":3,"sources":["components/SearchBar.js","components/BackgroundImage.js","components/NameInput.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","useState","Date","date","setDate","hour","getHours","min","String","getMinutes","padStart","useEffect","timerId","setTimeout","clearTimeout","style","width","zIndex","color","textAlign","fontWeight","fontSize","marginBottom","userSelect","action","method","type","name","size","maxLength","autoComplete","placeholder","BackgroundImage","src","alt","display","height","position","left","top","objectFit","backfaceVisibility","filter","onDragStart","e","preventDefault","window","event","returnValue","NameInput","JSON","parse","localStorage","getItem","setName","currName","setCurrName","editing","setEditing","onSubmit","setItem","stringify","value","onChange","target","onFocus","select","autoFocus","cursor","onClick","Container","styled","div","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAEe,SAASA,IAAa,IAAD,EACVC,mBAAS,IAAIC,MADH,mBAC3BC,EAD2B,KACrBC,EADqB,KAG5BC,EAAOF,EAAKG,WACZC,EAAMC,OAAOL,EAAKM,cAAcC,SAAS,EAAG,KAYlD,OAVAC,qBAAU,WACR,IAEMC,EAAUC,YAFH,kBAAMT,EAAQ,IAAIF,QAEE,KAIjC,OAAO,kBAAMY,aAAaF,MACzB,CAACT,IAGF,yBAAKY,MAAO,CAAEC,MAAO,MAAOC,OAAQ,IAClC,wBACEF,MAAO,CACLG,MAAO,UACPC,UAAW,SACXC,WAAY,IACZC,SAAU,OACVC,aAAc,GACdC,WAAY,SAGblB,EAVH,IAUUE,GAEV,0BAAMiB,OAAO,gCAAgCC,OAAO,OAClD,2BAAOC,KAAK,OAAOC,KAAK,IAAIC,KAAK,KAAKC,UAAU,MAAMC,aAAa,MAAMC,YAAY,a,MC9B9E,SAASC,IActB,OACE,6BACE,yBACEC,IAAG,6DACHC,KAAG,EACHnB,MAAO,CACLoB,QAAS,QACTC,OAAQ,OACRpB,MAAO,OACPqB,SAAU,QACVC,KAAM,EACNC,IAAK,EACLC,UAAW,QACXC,mBAAoB,SACpBxB,OAAQ,EACRyB,OAAQ,6BAEVC,YAAa,SAACC,GACRA,GAAKA,EAAEC,eACTD,EAAEC,iBAEFC,OAAOC,MAAMC,aAAc,MCpCxB,SAASC,IAAa,IAAD,EACVhD,mBAASiD,KAAKC,MAAML,OAAOM,aAAaC,QAAQ,cAAgB,IADtD,mBAC3B1B,EAD2B,KACrB2B,EADqB,OAEFrD,mBAAS0B,GAFP,mBAE3B4B,EAF2B,KAEjBC,EAFiB,OAGJvD,mBAAkB,KAAT0B,GAHL,mBAG3B8B,EAH2B,KAGlBC,EAHkB,KAoBlC,OACE,yBAAK3C,MAAO,CAAEC,MAAO,MAAOC,OAAQ,EAAGK,aAAc,OACtC,IAAZmC,EACC,oCACE,wBACE1C,MAAO,CACLG,MAAO,UACPC,UAAW,SACXC,WAAY,IACZC,SAAU,OACVC,aAAc,GACdC,WAAY,SAPhB,qBAYA,0BAAMoC,SA3BO,SAACf,GACpBA,EAAEC,iBACFS,EAAQC,GACRT,OAAOM,aAAaQ,QAAQ,WAAYV,KAAKW,UAAUN,IACvDG,GAAW,KAwBH,2BACEhC,KAAK,OACLE,KAAK,KACLC,UAAU,MACVC,aAAa,MACbC,YAAY,qBACZ+B,MAAOP,EACPQ,SAvCc,SAACnB,GACzBY,EAAYZ,EAAEoB,OAAOF,QAuCXG,QAAS,SAACrB,GACRA,EAAEoB,OAAOE,UAEXC,WAAS,MAKf,wBACEpD,MAAO,CACLG,MAAO,UACPC,UAAW,SACXC,WAAY,IACZC,SAAU,OACVC,aAAc,GACd8C,OAAQ,UACR7C,WAAY,QAEd8C,QA/Ce,WACrBX,GAAW,KAoCP,UAYU/B,EAZV,M,gQCjDR,IAAM2C,EAAYC,IAAOC,IAAV,KAqBAC,EAVH,WACV,OACE,kBAACH,EAAD,KACE,kBAACtC,EAAD,MACA,kBAAChC,EAAD,MACA,kBAACiD,EAAD,QCVcyB,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a9be29a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport default function SearchBar() {\n  const [date, setDate] = useState(new Date());\n\n  const hour = date.getHours();\n  const min = String(date.getMinutes()).padStart(2, '0');\n\n  useEffect(() => {\n    const tick = () => setDate(new Date());\n\n    const timerId = setTimeout(tick, 1000);\n\n    // 返回一个清除函数， 清除函数会在组件卸载前执行，执行当前effect前对上一个effect进行清除\n\n    return () => clearTimeout(timerId);\n  }, [date]);\n\n  return (\n    <div style={{ width: '40%', zIndex: 1 }}>\n      <h1\n        style={{\n          color: '#efeeee',\n          textAlign: 'center',\n          fontWeight: 300,\n          fontSize: '5rem',\n          marginBottom: 40,\n          userSelect: 'none',\n        }}\n      >\n        {hour}:{min}\n      </h1>\n      <form action=\"https://www.google.com/search\" method=\"get\">\n        <input type=\"text\" name=\"q\" size=\"50\" maxLength=\"255\" autoComplete=\"off\" placeholder=\"Search\" />\n        {/* <button type=\"submit\" name=\"btnG\">\n          Search\n        </button> */}\n      </form>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nexport default function BackgroundImage() {\n  // const [img, setImg] = useState(\n  //   '/th?id=OHR.FatBearWeek_EN-US2267733203_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp'\n  // );\n\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     const result = await axios('https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1');\n  //     setImg(result.data.images.url);\n  //     console.log(result);\n  //   };\n  //   fetchData();\n  // }, []);\n\n  return (\n    <div>\n      <img\n        src={`https://source.unsplash.com/random/1920×1080/?wallpaper`}\n        alt\n        style={{\n          display: 'block',\n          height: '100%',\n          width: '100%',\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          objectFit: 'cover',\n          backfaceVisibility: 'hidden',\n          zIndex: 0,\n          filter: 'brightness(0.6) blur(5px)',\n        }}\n        onDragStart={(e) => {\n          if (e && e.preventDefault) {\n            e.preventDefault();\n          } else {\n            window.event.returnValue = false;\n          }\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function NameInput() {\n  const [name, setName] = useState(JSON.parse(window.localStorage.getItem('username')) || '');\n  const [currName, setCurrName] = useState(name);\n  const [editing, setEditing] = useState(name === '');\n\n  const handleInputChange = (e) => {\n    setCurrName(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setName(currName);\n    window.localStorage.setItem('username', JSON.stringify(currName));\n    setEditing(false);\n  };\n\n  const handleOpenForm = () => {\n    setEditing(true);\n  };\n\n  return (\n    <div style={{ width: '40%', zIndex: 1, marginBottom: 100 }}>\n      {editing === true ? (\n        <>\n          <h1\n            style={{\n              color: '#efeeee',\n              textAlign: 'center',\n              fontWeight: 300,\n              fontSize: '3rem',\n              marginBottom: 40,\n              userSelect: 'none',\n            }}\n          >\n            What's your name?\n          </h1>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              size=\"50\"\n              maxLength=\"255\"\n              autoComplete=\"off\"\n              placeholder=\"Enter your name...\"\n              value={currName}\n              onChange={handleInputChange}\n              onFocus={(e) => {\n                e.target.select();\n              }}\n              autoFocus\n            />\n          </form>\n        </>\n      ) : (\n        <h1\n          style={{\n            color: '#efeeee',\n            textAlign: 'center',\n            fontWeight: 300,\n            fontSize: '3rem',\n            marginBottom: 40,\n            cursor: 'pointer',\n            userSelect: 'none',\n          }}\n          onClick={handleOpenForm}\n        >\n          Hello, {name}!\n        </h1>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport SearchBar from './SearchBar';\nimport BackgroundImage from './BackgroundImage';\nimport NameInput from './NameInput';\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  position: absolute;\n  background-color: #2c2c2e;\n  justify-content: center;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst App = () => {\n  return (\n    <Container>\n      <BackgroundImage />\n      <SearchBar />\n      <NameInput />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}